// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dsha256/packer-pro/internal/entity/size"
)

// SizeCreate is the builder for creating a Size entity.
type SizeCreate struct {
	config
	mutation *SizeMutation
	hooks    []Hook
}

// SetSize sets the "size" field.
func (sc *SizeCreate) SetSize(i int) *SizeCreate {
	sc.mutation.SetSize(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SizeCreate) SetID(i int) *SizeCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the SizeMutation object of the builder.
func (sc *SizeCreate) Mutation() *SizeMutation {
	return sc.mutation
}

// Save creates the Size in the database.
func (sc *SizeCreate) Save(ctx context.Context) (*Size, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SizeCreate) SaveX(ctx context.Context) *Size {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SizeCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SizeCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SizeCreate) check() error {
	if _, ok := sc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`entity: missing required field "Size.size"`)}
	}
	if v, ok := sc.mutation.Size(); ok {
		if err := size.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`entity: validator failed for field "Size.size": %w`, err)}
		}
	}
	return nil
}

func (sc *SizeCreate) sqlSave(ctx context.Context) (*Size, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SizeCreate) createSpec() (*Size, *sqlgraph.CreateSpec) {
	var (
		_node = &Size{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(size.Table, sqlgraph.NewFieldSpec(size.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Size(); ok {
		_spec.SetField(size.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	return _node, _spec
}

// SizeCreateBulk is the builder for creating many Size entities in bulk.
type SizeCreateBulk struct {
	config
	err      error
	builders []*SizeCreate
}

// Save creates the Size entities in the database.
func (scb *SizeCreateBulk) Save(ctx context.Context) ([]*Size, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Size, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SizeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SizeCreateBulk) SaveX(ctx context.Context) []*Size {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SizeCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SizeCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
